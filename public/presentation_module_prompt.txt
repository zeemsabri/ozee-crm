5. POST /api/presentations (Updated)

Description: The main creation endpoint needs to be enhanced.

Logic: The request body can now optionally include template_id OR source_slide_ids.

If template_id is present, the backend first clones that template to create the new presentation, then assigns the presentable from the request.

If source_slide_ids is present, the backend creates a new blank presentation and then immediately copies the specified slides into it.

1.3. Database Seeder Updates
The seeder is critical for providing immediate value.

Action: Deconstruct the fannit.html and dynamic_outdoor.html files into a series of high-quality, pre-built templates.

Required Templates:

"Full SEO Audit Template" (from fannit.html)

"Website Performance Report Template" (performance slides from fannit.html)

"Social Media & Design Audit Template" (social/design slides from fannit.html)

"Web Application Proposal Template" (from dynamic_outdoor.html)

Implementation: The seeder will create these records with is_template = true and populate all necessary child slides and content blocks with placeholder content.

Phase 2: Frontend Implementation (Vue CRM)
This phase implements the user-facing features that consume the new backend capabilities.

2.1. New Presentation Workflow
The initial creation flow will be updated to be more intuitive.

PresentationList.vue:

The "+ New" button no longer opens PresentationForm directly. It now opens a new CreationChoiceModal.vue.

This modal asks the user "How would you like to start?" and provides two options: "Start from Scratch" or "Use a Template".

TemplateBrowser.vue (New Component):

If the user chooses "Use a Template," this new component is shown (likely in a large modal).

It calls the GET /api/templates endpoint and displays the available templates in a grid of cards with titles and thumbnail previews.

When a user selects a template, it closes and opens PresentationForm.vue, passing the selected template_id.

PresentationForm.vue (Updated):

The form will now accept an optional template_id or source_slide_ids array.

When submitting, it will include these IDs in the payload to the POST /api/presentations endpoint.

2.2. Advanced Duplication & Content Reuse Workflow
This workflow centers around a new modal and new actions in the presentation list.

PresentationList.vue (Updated):

Each row in the presentation list will now have two new buttons:

"Duplicate"

"Manage Slides"

SlideSummaryModal.vue (New Core Component):

This is a large modal that displays a grid of selectable slide thumbnails for a given presentation. It is the central UI for all advanced copy/duplicate actions.

It will contain a toolbar with action buttons at the bottom.

Implementing the Workflows:

"Duplicate" Workflow:

Clicking "Duplicate" opens the SlideSummaryModal.vue.

The modal will display two action buttons:

"Create a Full Duplicate": Calls POST /api/presentations/{id}/duplicate. On success, closes the modal and refreshes the presentation list.

"Create New from Selection...": Becomes active when slides are checked. On click, it passes the selected source_slide_ids to PresentationForm.vue to create a new, custom presentation.

"Manage Slides" / "Copy To" Workflow:

Clicking "Manage Slides" opens the SlideSummaryModal.vue.

The modal displays one primary action button:

"Copy to...": Becomes active when slides are checked. On click, it displays a searchable dropdown of other existing presentations.

When a destination is chosen and confirmed, it calls POST /api/presentations/{targetId}/copy-slides.

2.3. Save as Template Workflow
EditorView.vue & Toolbar.vue (Updated):

Add a "Save as Template" button to the editor's main toolbar.

This button will call the POST /api/presentations/{id}/save-as-template endpoint.

On success, display a toast notification: "Template created successfully."
