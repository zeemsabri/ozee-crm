import{aM as p}from"./app-0RB-mjiy.js";import{a}from"./presentationsApi-DFRJjqni.js";let n={success:e=>console.log(e),error:e=>console.error(e)};try{const e=require("@/Utils/notification");e!=null&&e.success&&(e!=null&&e.error)&&(n=e)}catch{}function h(e,s=500){let t;return function(...o){clearTimeout(t),t=setTimeout(()=>e.apply(this,o),s)}}const k=p("presentation",{state:()=>({loading:!1,presentation:null,selectedSlideId:null,selectedBlockId:null,savingBlocks:{},previewOpen:!1,previewMaximized:!1}),getters:{slides(e){var s;return(((s=e.presentation)==null?void 0:s.slides)||[]).slice().sort((t,o)=>t.display_order-o.display_order)},selectedSlide(e){return this.slides.find(s=>s.id===e.selectedSlideId)||null}},actions:{async load(e){var s;this.loading=!0;try{this.presentation=await a.get(e),(s=this.slides)!=null&&s.length?this.selectedSlideId=this.slides[0].id:this.selectedSlideId=null}catch(t){n.error("Failed to load presentation."),console.error(t),this.presentation={id:e,slides:[]},this.selectedSlideId=null}finally{this.loading=!1}},selectSlide(e){this.selectedSlideId=e},selectBlock(e){this.selectedBlockId=e},showPreview(){this.previewOpen=!0},hidePreview(){this.previewOpen=!1,this.previewMaximized=!1},togglePreview(){this.previewOpen?this.hidePreview():this.showPreview()},setPreviewMax(e){this.previewMaximized=!!e,this.previewMaximized&&(this.previewOpen=!0)},togglePreviewMax(){this.setPreviewMax(!this.previewMaximized)},async savePresentation(){var e;if((e=this.presentation)!=null&&e.id)try{await a.update(this.presentation.id,{title:this.presentation.title}),n.success("Presentation saved.")}catch(s){n.error("Failed to save presentation."),console.error(s)}},async updatePresentationTitle(e){var t;if(!((t=this.presentation)!=null&&t.id))return;const s=this.presentation.title;this.presentation.title=e;try{await a.update(this.presentation.id,{title:e}),n.success("Presentation title updated.")}catch(o){n.error("Failed to update presentation title."),this.presentation.title=s,console.error(o)}},async addSlide(e={template_name:"Heading",title:"New Slide"}){const s=[...this.presentation.slides||[]];try{const t=await a.addSlide(this.presentation.id,e),o={...t,content_blocks:t.content_blocks||[]};this.presentation.slides.push(o),this.selectedSlideId=o.id,n.success("Slide added.")}catch(t){n.error("Failed to add slide."),this.presentation.slides=s,console.error(t)}},async updateSlide(e,s){const t=this.presentation.slides.findIndex(i=>i.id===e),o=t!==-1?{...this.presentation.slides[t]}:null;try{const i=await a.updateSlide(e,s);t!==-1&&Object.assign(this.presentation.slides[t],i),n.success("Slide updated.")}catch(i){n.error("Failed to update slide."),t!==-1&&o&&(this.presentation.slides[t]=o),console.error(i)}},async deleteSlide(e){var t;const s=[...this.presentation.slides];this.presentation.slides=s.filter(o=>o.id!==e),this.selectedSlideId===e&&(this.selectedSlideId=((t=this.slides[0])==null?void 0:t.id)||null);try{await a.deleteSlide(e),n.success("Slide deleted successfully.")}catch(o){n.error("Failed to delete slide. Please try again."),this.presentation.slides=s,this.presentation.slides.find(i=>i.id===this.selectedSlideId)||(this.selectedSlideId=e),console.error(o)}},async reorderSlides(e){const s=JSON.parse(JSON.stringify(this.presentation.slides)),t=new Map(this.presentation.slides.map(i=>[i.id,i]));this.presentation.slides=e.map((i,r)=>{const l=t.get(i);return l&&(l.display_order=r+1),l}).filter(Boolean);const o=e.map((i,r)=>({id:i,display_order:r+1}));try{await a.reorderSlides(o),n.success("Slides reordered.")}catch(i){n.error("Failed to reorder blocks."),this.presentation.slides=s,console.error(i)}},async addBlock(e,s){const t=this.presentation.slides.find(i=>i.id===e),o=t?[...t.content_blocks||[]]:[];try{const i=await a.addBlock(e,s);t&&(t.content_blocks=t.content_blocks||[],t.content_blocks.push(i)),n.success("Block added.")}catch(i){n.error("Failed to add block."),t&&(t.content_blocks=o),console.error(i)}},async deleteBlock(e){let s=null;for(const o of this.presentation.slides)if((o.content_blocks||[]).some(i=>i.id===e)){s=o;break}const t=s?[...s.content_blocks||[]]:null;s&&(s.content_blocks=(s.content_blocks||[]).filter(o=>o.id!==e));try{await a.deleteBlock(e),n.success("Block deleted.")}catch(o){n.error("Failed to delete block."),s&&t&&(s.content_blocks=t),console.error(o)}},async reorderBlocks(e,s){const t=this.presentation.slides.find(r=>r.id===e),o=t?JSON.parse(JSON.stringify(t.content_blocks||[])):[],i=s.map((r,l)=>({id:r,display_order:l+1}));if(t){const r=new Map((t.content_blocks||[]).map(l=>[l.id,l]));t.content_blocks=s.map((l,c)=>{const d=r.get(l);return d&&(d.display_order=c+1),d}).filter(Boolean)}try{await a.reorderBlocks(i),n.success("Blocks reordered.")}catch(r){n.error("Failed to reorder blocks."),t&&(t.content_blocks=o),console.error(r)}},scheduleSaveBlock:h(async function(e,s){const t=this.slides.find(i=>{var r;return(r=i.content_blocks)==null?void 0:r.some(l=>l.id===e)});if(!t)return;const o=t.content_blocks.find(i=>i.id===e);if(o){Object.assign(o.content_data,s),this.savingBlocks[e]=!0;try{await a.updateBlock(e,{content_data:s})}catch(i){n.error("Failed to save block."),console.error(i)}finally{this.savingBlocks[e]=!1}}},600)}});export{k as u};
