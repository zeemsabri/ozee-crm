1. Objective

Refactor the existing Index.vue component to separate concerns, improve the user experience, and prepare for new features. The goal is to move from a basic table view to a dynamic, visual Kanban board for lead management.

2. Component Creation Plan

Create the following new Vue components to handle specific parts of the UI.

LeadKanban.vue: This will be the main view. It will manage the different lead status columns and the drag-and-drop logic.

LeadCard.vue: A reusable component for displaying a single lead's key information within the Kanban board.

LeadFormModal.vue: A single modal component to handle both the creation and editing of leads, reducing code duplication.

LeadsFilters.vue: A component to encapsulate the filtering and search functionality.

3. Implementation Steps

Follow these steps to update the existing application.

Step 3.1: Refactor API Logic

Create a new composable file, e.g., composables/useLeads.js.

Move all API calls (fetchLeads, createLead, updateLead, deleteLead) and the related state (e.g., leads, loading, errors, form) from Index.vue into this composable.

Index.vue will then simply use this composable to access the data and methods.

Step 3.2: Create the LeadKanban.vue Component

This component will replace the table in Index.vue.

It will accept the leads array as a prop.

Use a CSS Grid or Flexbox to create columns for each lead status (e.g., "New," "Contacted," "Qualified").

Implement drag-and-drop functionality to allow users to move leads between columns. This drag-and-drop event should trigger a call to the updateLead method from your composable to update the lead's status on the backend.

Step 3.3: Create the LeadCard.vue Component

This component will accept a single lead object as a prop.

It will display key information such as name, company, email, and phone.

Apply color-coding based on the lead's status to provide a visual cue to the user.

Add a click handler to the card that navigates to a new LeadDetails.vue page, which we will create in a future step.

Step 3.4: Create the LeadFormModal.vue Component

This component will be a single, reusable modal.

It will accept a lead prop. If the prop is present, it's in "edit" mode; otherwise, it's in "create" mode.

Move all form inputs (TextInput, InputLabel, InputError) into this component.

Emit an event (e.g., @lead-created or @lead-updated) to the parent component after a successful API call.

Step 3.5: Update Index.vue

Remove all the form and API logic.

Import and use the useLeads composable.

Replace the entire table section with the new LeadKanban component.

Replace the Create Modal and Edit Modal with a single instance of LeadFormModal. The openCreateModal and openEditModal methods will now simply toggle this single modal and pass the correct data to it.

4. Next Steps

Lead Details Page: Create the LeadDetails.vue component. This page will display all of a lead's information and will be where the "Convert to Client" button and the project_notes section will reside.

Notes Integration: Implement the project_notes relationship in the LeadDetails.vue component to add and display notes and reminders associated with a lead.

Conversion UI: Create a dedicated "Convert to Client" button that makes a POST request to the backend conversion endpoint.

This plan provides a clear and professional guide for your developer, ensuring a smooth and logical implementation process.
